class Solution {
public:

    void dfs(unordered_map<int,list<int>> &adj,int node,unordered_map<int,bool> &visited){
        visited[node]=true;
        for(auto i:adj[node]){
            if(!visited[i]){
                dfs(adj,i,visited);
            }
        }
    }
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        unordered_map<int,list<int>> adj;
        for(int i=0;i<edges.size();i++){
            int u=edges[i][0];
            int v=edges[i][1];

            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        unordered_map<int,bool> visited;
        dfs(adj,source,visited);
        if(visited[destination]==true){
            return true;
        }
        else{
            return false;
        }

        



    }
};
