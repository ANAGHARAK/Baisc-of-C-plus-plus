#include <bits/stdc++.h> 
int f(int ind, int wt,vector<int> &weight, vector<int> &value ,vector<vector<int>> &dp){
	if(ind==0){
		if(weight[ind]<=wt){
			return value[ind];
		}
		else{
			return 0;
		}
	}
	if(dp[ind][wt]!=-1){
		return dp[ind][wt];
	}
	int notTake=0+f(ind-1,wt,weight,value,dp);
	int take=INT_MIN;
	if(weight[ind]<=wt){
		take=value[ind]+f(ind-1,wt-weight[ind],weight,value,dp);
	}
	dp[ind][wt]= max(take,notTake);
	return dp[ind][wt];
}
int ftab(vector<int> weight, vector<int> value, int n, int maxWeight){
	vector<vector<int>> dp(n,vector<int>(maxWeight+1,0));
	for(int i=weight[0];i<=maxWeight;i++){
		dp[0][i]=value[0];
	}

	for(int ind=1;ind<n;ind++){
		for(int W=0;W<=maxWeight;W++){
			int notTake=0+dp[ind-1][W];
			int take=INT_MIN;
			if(weight[ind]<=W){
				take=value[ind]+dp[ind-1][W-weight[ind]];
			}
			dp[ind][W]= max(take,notTake);
		}
	}
	return dp[n-1][maxWeight];
}
int fop(vector<int> weight, vector<int> value, int n, int maxWeight){
	vector<int> prev(maxWeight+1,0),cur(maxWeight+1,0);
	for(int i=weight[0];i<=maxWeight;i++){
		prev[i]=value[0];
	}

	for(int ind=1;ind<n;ind++){
		for(int W=0;W<=maxWeight;W++){
			int notTake=0+prev[W];
			int take=INT_MIN;
			if(weight[ind]<=W){
				take=value[ind]+prev[W-weight[ind]];
			}
			cur[W]= max(take,notTake);
		}
		prev=cur;
		
	}
	return prev[maxWeight];
}
int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
	// Write your code here
	// vector<vector<int>> dp(n,vector<int>(maxWeight+1,-1));
	// return f(n-1,maxWeight,weight,value,dp);
	return fop(weight,value,n,maxWeight);
}
