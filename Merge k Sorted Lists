/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* merge(ListNode* a, ListNode* b){
        if(a==NULL){
            return b;
        }
        if(b==NULL){
            return a;
        }
        ListNode* ans=new ListNode(-1);
        ListNode* temp=ans;
        while(a!=NULL && b!=NULL){
            if(a->val<b->val){
                temp->next=a;
                temp=a;
                a=a->next;
            }
            else{
                temp->next=b;
                temp=b;
                b=b->next;
            }
        }
        while(a!=NULL){
            temp->next=a;
                temp=a;
                a=a->next;
        }
        while(b!=NULL){
            temp->next=b;
            temp=b;
            b=b->next;
        }
        return ans->next;
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int k=lists.size();
        if(k==1){
            return lists[0];
        }
        if(k==0){
            return NULL;
        }
        ListNode* ans=merge(lists[1],lists[0]);
        for(int i=2;i<k;i++){
            ans=merge(lists[i],ans);
        }
        return ans;

    }
};
