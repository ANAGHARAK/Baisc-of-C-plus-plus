#define ll long long
class Solution {
public:
    int gcnt=0;
    vector<int> temp;
    void merge(vector<int>& arr,ll low,ll mid,ll high){
        temp.clear();
        ll left=low;
        ll right=mid+1;
        while(left<=mid && right<=high){
            if(arr[left]<=arr[right]){
                temp.push_back(arr[left]);
                left++;
            }
            else{
                temp.push_back(arr[right]);
                gcnt+=(mid-left+1);
                
                right++;
                
            }
        }
        while(left<=mid){
            temp.push_back(arr[left]);
            left++;
        }
        while(right<=high){
            temp.push_back(arr[right]);
            right++;
        }
        for(int i=low;i<=high;i++){
            arr[i]=temp[i-low];
        }
    }
    void mergeSort(vector<int>& nums,ll low,ll high){
        if(low>=high){
            return;
        }
        ll mid=low + (high - low) / 2;
        mergeSort(nums,low,mid);
        mergeSort(nums,mid+1,high);
        merge(nums,low,mid,high);
    
    }
    bool isIdealPermutation(vector<int>& nums) {
        int lcnt=0;
        for(int i=0;i<nums.size()-1;i++){
            if(nums[i]>nums[i+1]){
                lcnt++;
            }
            
        }
        mergeSort(nums,0,nums.size()-1);
        if(gcnt==lcnt){
            return true;
        }
        else{
            return false;
        }
    }
};
