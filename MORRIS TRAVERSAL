/*
Algorithm of MORRIS TRAVERSAL

curr=root;
while(curr!=NULL){
    if(curr->left==NULL){
        print(curr);
        curr=curr->right;
    }
    else{
        pre=curr->left;
        while(pre->right!=NULL && pre->right!=curr){
            pre=pre->right;
        }

        if(pre->right==NULL){
            pre->right=curr;
            curr=curr->left;
        }
        else{
            pre->right=NULL;
            print(curr);
            curr=curr->right;
        }
    }
}
*/


#include <bits/stdc++.h>
using namespace std;
 
/* A binary tree tNode has data, a pointer to left child
   and a pointer to right child */
struct tNode {
    int data;
    struct tNode* left;
    struct tNode* right;
};

void MorrisTraversal(struct tNode* root){

    struct tNode *curr, *pre;

    if(root==NULL){
        return;
    } 

    curr=root;
    while(curr!=NULL){
        if(curr->left==NULL){
            cout<<curr->data<<" ";
            curr=curr->right;
        }
        else{
            pre=curr->left;
            while(pre->right!=NULL && pre->right!=curr){
                pre=pre->right;
            }

            if(pre->right==NULL){
                pre->right=curr;
                curr=curr->left;
            }
            else{
                pre->right=NULL;
                cout<<curr->data<<" ";
                curr=curr->right;
            }
        }
    }
    
}

struct tNode* newtNode(int data)
{
    struct tNode* node = new tNode;
    node->data = data;
    node->left = NULL;
    node->right = NULL;
 
    return (node);
}
 
int main()
{
 
    /* Constructed binary tree is
            1
          /   \
         2     3
       /   \
      4     5
  */
    struct tNode* root = newtNode(1);
    root->left = newtNode(2);
    root->right = newtNode(3);
    root->left->left = newtNode(4);
    root->left->right = newtNode(5);
 
    MorrisTraversal(root);
 
    return 0;
}
