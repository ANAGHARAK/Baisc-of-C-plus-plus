class Solution {
public:

    // int solve(int n,vector<int>& nums){
    //     if(n==0){
    //         return nums[0];
    //     }
    //     if(n<0){
    //         return 0;
    //     }
    //     int pick=nums[n]+solve(n-2,nums);
    //     int notPick=0+solve(n-1,nums);
    //     return max(pick,notPick);
    // }

    //memoization
    // int solve(int n,vector<int>& nums,vector<int> &dp){
    //     if(n==0){
    //         return nums[0];
    //     }
    //     if(n<0){
    //         return 0;
    //     }
    //     if(dp[n]!=-1){
    //         return dp[n];
    //     }
    //     int pick=nums[n]+solve(n-2,nums,dp);
    //     int notPick=0+solve(n-1,nums,dp);
    //     dp[n]=max(pick,notPick);
    //     return dp[n];
    // }

    //tabulation
    // int solve(vector<int>& nums){
    //     int n=nums.size();
    //     vector<int> dp(n,0);
    //     dp[0]=nums[0];
    //     for(int i=1;i<n;i++){
    //         int pick=0;
    //         if(i-2<0){
    //             pick=0+nums[i];
    //         }
    //         else{
    //             pick=dp[i-2]+nums[i];
    //         }
            
    //         int notPick=dp[i-1]+0;

    //         dp[i]=max(pick,notPick);
    //     }
    //     return dp[n-1];
    // }

    //space optimization
    int solve(vector<int>& nums){
        int n=nums.size();
        int prev1=nums[0];
        int prev2=0;
        int curr;
        if(nums.size()==1){
            return nums[0];
        }
        for(int i=1;i<n;i++){
            int pick=prev2+nums[i];
            int notPick=prev1+0;
            curr=max(pick,notPick);
            prev2=prev1;
            prev1=curr;
        }
        return curr;
    }
    int rob(vector<int>& nums) {
        // int n=nums.size();
        // int ans=solve(n-1,nums);
        // return ans;

        //memoization
        // int n=nums.size();
        // vector<int> dp(n,-1);
        // return solve(n-1,nums,dp);

        //tabulation
        // int n=nums.size();
        // return solve(nums);

        //space optimization
        return solve(nums);

    }
};
